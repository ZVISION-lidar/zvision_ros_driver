#!/usr/bin/env python
PACKAGE = "zvision_lidar_pointcloud"

from math import pi
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("time_offset", double_t,  0, "A manually calibrated offset (in seconds) to add to the timestamp before publication of a message.", 0.0, -1.0, 1.0)
gen.add("x_trans", double_t,  1, "A manually calibrated offset (in meter) to x trans.", .0, -1.0, 1.0)
gen.add("y_trans", double_t,  2, "A manually calibrated offset (in meter) to y trans.", .0, -1.0, 1.0)
gen.add("z_trans", double_t,  3, "A manually calibrated offset (in meter) to z trans.", .0, -1.0, 1.0)

gen.add("x_rotation", double_t,  4, "A manually calibrated offset (in degree) to x rotation.", 0.0, -120.0, 120.0)
gen.add("y_rotation", double_t,  5, "A manually calibrated offset (in degree) to y rotation.", 0.0, -120.0, 120.0)
gen.add("z_rotation", double_t,  6, "A manually calibrated offset (in degree) to z rotation.", 0.0, -120.0, 120.0)


gen.add("roi_sample_lines", int_t, 7, "Lidar status ROI sample lines", 10, 0, 80)
gen.add("roi_interval", int_t, 8, "Lidar status ROI sample interval per line", 10, 0, 40)

gen.add("statistic_frame_num", int_t, 9, "Lidar status statistic frame number", 100, 0, 6000)
gen.add("min_roi_pointnum", int_t, 10, "Lidar status ROI point cloud min number threshold", 60, 0, 5000)
gen.add("z_height", double_t, 11, "Lidar status ROI point cloud z_height(m)", -0.58, -2, 0)
gen.add("roi_z_diff_threshold", double_t, 12, "Lidar status ROI z diff threshold(m)", 0.1, 0, 1)
gen.add("error_rate_threshold", double_t, 13, "Lidar status ROI error rate threshold", 0.5, 0, 1)

exit(gen.generate(PACKAGE, "cloud_node", "CloudNode"))
